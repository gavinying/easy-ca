#!/bin/bash

CA_DIR=generated/caysd-root-ca

HOME=$CA_DIR
CA_NAME=$( basename "${HOME}" )

echo
echo "Creating root CA in '${HOME}'"
echo

init_ca_home ${HOME}
generate_conf ${HOME}/bin/defaults.conf
source ${HOME}/bin/defaults.conf

echo
echo -n "Enter passphase for encrypting root CA key: "
read -s PASS1
echo
echo -n "Verifying - Enter passphase for encrypting root CA key: "
read -s PASS2
echo

if [ "${PASS1}" != "${PASS2}" ]; then
    echo "Passphrases did not match, exiting."
    exit 1
fi
export CA_PASS=${PASS1}

pushd ${HOME} > /dev/null

# Generate the root CA openssl config
template "${BIN_DIR}/templates/root.tpl" "conf/ca.conf"

# Create the root CA csr
openssl genrsa -out ca/private/ca.key -passout env:CA_PASS 4096
chmod 0400 ca/private/ca.key

# Create the root CA csr
openssl req -new -batch \
            -config conf/ca.conf \
            -key ca/private/ca.key \
            -out ca/ca.csr \
            -passin env:CA_PASS

# Create the root CA certificate
openssl ca -selfsign -batch -notext \
           -config conf/ca.conf \
           -in ca/ca.csr \
           -out ca/ca.crt \
           -days 36500 \
           -extensions root_ca_ext \
           -passin env:CA_PASS

# Create the root CRL
openssl ca -gencrl -batch \
           -config conf/ca.conf \
           -out crl/ca.crl

# Create the chain bundle for intermediate ca to use
cat ca/private/ca.key >> ca/chain.pem
chmod 400 ca/chain.pem

# Replicate the existing binary directory
for BIN in ${BINARIES}; do
    cp ${BIN_DIR}/${BIN} bin/
done
cp -r ${BIN_DIR}/templates bin/

popd > /dev/null

echo
echo "Root CA initialized."
echo

